/**
 * @fileoverview added by tsickle
 * Generated from: src/reducers/entity-collection-reducer-registry.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, Optional } from '@angular/core';
import { compose } from '@ngrx/store';
import { ENTITY_COLLECTION_META_REDUCERS } from './constants';
import { EntityCollectionReducerFactory, } from './entity-collection-reducer';
/**
 * A hash of EntityCollectionReducers
 * @record
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './entity-collection-reducer';
export function EntityCollectionReducers() { }
/**
 * Registry of entity types and their previously-constructed reducers.
 * Can create a new CollectionReducer, which it registers for subsequent use.
 */
export class EntityCollectionReducerRegistry {
    /**
     * @param {?} entityCollectionReducerFactory
     * @param {?=} entityCollectionMetaReducers
     */
    constructor(entityCollectionReducerFactory, entityCollectionMetaReducers) {
        this.entityCollectionReducerFactory = entityCollectionReducerFactory;
        this.entityCollectionReducers = {};
        this.entityCollectionMetaReducer = (/** @type {?} */ (compose.apply(null, entityCollectionMetaReducers || [])));
    }
    /**
     * Get the registered EntityCollectionReducer<T> for this entity type or create one and register it.
     * @template T
     * @param {?} entityName Name of the entity type for this reducer
     * @return {?}
     */
    getOrCreateReducer(entityName) {
        /** @type {?} */
        let reducer = this.entityCollectionReducers[entityName];
        if (!reducer) {
            reducer = this.entityCollectionReducerFactory.create(entityName);
            reducer = this.registerReducer(entityName, reducer);
            this.entityCollectionReducers[entityName] = reducer;
        }
        return reducer;
    }
    /**
     * Register an EntityCollectionReducer for an entity type
     * @template T
     * @param {?} entityName - the name of the entity type
     * @param {?} reducer - reducer for that entity type
     *
     * Examples:
     *   registerReducer('Hero', myHeroReducer);
     *   registerReducer('Villain', myVillainReducer);
     * @return {?}
     */
    registerReducer(entityName, reducer) {
        reducer = this.entityCollectionMetaReducer((/** @type {?} */ (reducer)));
        return (this.entityCollectionReducers[entityName.trim()] = reducer);
    }
    /**
     * Register a batch of EntityCollectionReducers.
     * @param {?} reducers - reducers to merge into existing reducers
     *
     * Examples:
     *   registerReducers({
     *     Hero: myHeroReducer,
     *     Villain: myVillainReducer
     *   });
     * @return {?}
     */
    registerReducers(reducers) {
        /** @type {?} */
        const keys = reducers ? Object.keys(reducers) : [];
        keys.forEach((/**
         * @param {?} key
         * @return {?}
         */
        (key) => this.registerReducer(key, reducers[key])));
    }
}
EntityCollectionReducerRegistry.ɵfac = function EntityCollectionReducerRegistry_Factory(t) { return new (t || EntityCollectionReducerRegistry)(ɵngcc0.ɵɵinject(ɵngcc1.EntityCollectionReducerFactory), ɵngcc0.ɵɵinject(ENTITY_COLLECTION_META_REDUCERS, 8)); };
EntityCollectionReducerRegistry.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: EntityCollectionReducerRegistry, factory: EntityCollectionReducerRegistry.ɵfac });
/** @nocollapse */
EntityCollectionReducerRegistry.ctorParameters = () => [
    { type: EntityCollectionReducerFactory },
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [ENTITY_COLLECTION_META_REDUCERS,] }] }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(EntityCollectionReducerRegistry, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.EntityCollectionReducerFactory }, { type: Array, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [ENTITY_COLLECTION_META_REDUCERS]
            }] }]; }, null); })();
if (false) {
    /**
     * @type {?}
     * @protected
     */
    EntityCollectionReducerRegistry.prototype.entityCollectionReducers;
    /**
     * @type {?}
     * @private
     */
    EntityCollectionReducerRegistry.prototype.entityCollectionMetaReducer;
    /**
     * @type {?}
     * @private
     */
    EntityCollectionReducerRegistry.prototype.entityCollectionReducerFactory;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LWNvbGxlY3Rpb24tcmVkdWNlci1yZWdpc3RyeS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbW9kdWxlcy9kYXRhL3NyYy9yZWR1Y2Vycy9lbnRpdHktY29sbGVjdGlvbi1yZWR1Y2VyLXJlZ2lzdHJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBRSxPQUFPLEVBQWUsTUFBTSxhQUFhLENBQUM7QUFJbkQsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzlELE9BQU8sRUFFTCw4QkFBOEIsR0FDL0IsTUFBTSw2QkFBNkIsQ0FBQztBQUNyQztBQUNHO0FBQXNDO0FBQy9COzs7QUFBViw4Q0FFQztBQUNEO0FBQ0c7QUFDbUU7QUFDTztBQUc3RSxNQUFNLE9BQU8sK0JBQStCO0FBQzVDO0FBQVE7QUFBaUQ7QUFDckI7QUFBUSxJQUsxQyxZQUNVLDhCQUE4RCxFQUd0RSw0QkFBNEU7QUFDN0UsUUFKUyxtQ0FBOEIsR0FBOUIsOEJBQThCLENBQWdDO0FBQUMsUUFQL0QsNkJBQXdCLEdBQTZCLEVBQUUsQ0FBQztBQUNwRSxRQVdJLElBQUksQ0FBQywyQkFBMkIsR0FBRyxtQkFBQSxPQUFPLENBQUMsS0FBSyxDQUM5QyxJQUFJLEVBQ0osNEJBQTRCLElBQUksRUFBRSxDQUNuQyxFQUFPLENBQUM7QUFDYixJQUFFLENBQUM7QUFDSDtBQUVDO0FBQ0U7QUFBbUI7QUFFQTtBQUFtQjtBQUFRLElBQS9DLGtCQUFrQixDQUFJLFVBQWtCO0FBQUk7QUFBeUIsWUFDL0QsT0FBTyxHQUErQixJQUFJLENBQUMsd0JBQXdCLENBQ3JFLFVBQVUsQ0FDWDtBQUNMLFFBQ0ksSUFBSSxDQUFDLE9BQU8sRUFBRTtBQUNsQixZQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsOEJBQThCLENBQUMsTUFBTSxDQUFJLFVBQVUsQ0FBQyxDQUFDO0FBQzFFLFlBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUksVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzdELFlBQU0sSUFBSSxDQUFDLHdCQUF3QixDQUFDLFVBQVUsQ0FBQyxHQUFHLE9BQU8sQ0FBQztBQUMxRCxTQUFLO0FBQ0wsUUFBSSxPQUFPLE9BQU8sQ0FBQztBQUNuQixJQUFFLENBQUM7QUFDSDtBQUVDO0FBQ0U7QUFBbUI7QUFDTTtBQUdkO0FBQU87QUFBaUI7QUFDRTtBQUcxQjtBQUNMO0FBQVEsSUFGZixlQUFlLENBQ2IsVUFBa0IsRUFDbEIsT0FBbUM7QUFDcEMsUUFDQyxPQUFPLEdBQUcsSUFBSSxDQUFDLDJCQUEyQixDQUFDLG1CQUFBLE9BQU8sRUFBTyxDQUFDLENBQUM7QUFDL0QsUUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDO0FBQ3hFLElBQUUsQ0FBQztBQUNIO0FBRUM7QUFDRTtBQUVDO0FBQU87QUFDRTtBQUNFO0FBQ0U7QUFHZjtBQUFhO0FBQW1CO0FBQVEsSUFBeEMsZ0JBQWdCLENBQUMsUUFBa0M7QUFDckQ7QUFBeUIsY0FBZixJQUFJLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO0FBQ3RELFFBQUksSUFBSSxDQUFDLE9BQU87QUFBTTtBQUEwQjtBQUM5QztBQUVNLFFBSFMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFDLENBQUM7QUFDcEUsSUFBRSxDQUFDO0FBQ0g7MkRBcEVDLFVBQVU7NkpBQ1Q7QUFBQztBQUFtQjtBQUNVLFlBZDlCLDhCQUE4QjtBQUM5Qix3Q0FxQkcsUUFBUSxZQUNSLE1BQU0sU0FBQywrQkFBK0I7QUFDckM7Ozs7Ozs7O2tDQUFFO0FBQUM7QUFBYTtBQUFRO0FBQWlCO0FBQWtCO0FBQVEsSUFWdkUsbUVBQWtFO0FBQ3BFO0FBQVE7QUFBaUI7QUFBZ0I7QUFBUSxJQUEvQyxzRUFHRTtBQUNKO0FBQ087QUFDRTtBQUFnQjtBQUFRLElBQTdCLHlFQUFzRTtBQUFDO0FBQzFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgY29tcG9zZSwgTWV0YVJlZHVjZXIgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5cbmltcG9ydCB7IEVudGl0eUFjdGlvbiB9IGZyb20gJy4uL2FjdGlvbnMvZW50aXR5LWFjdGlvbic7XG5pbXBvcnQgeyBFbnRpdHlDb2xsZWN0aW9uIH0gZnJvbSAnLi9lbnRpdHktY29sbGVjdGlvbic7XG5pbXBvcnQgeyBFTlRJVFlfQ09MTEVDVElPTl9NRVRBX1JFRFVDRVJTIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHtcbiAgRW50aXR5Q29sbGVjdGlvblJlZHVjZXIsXG4gIEVudGl0eUNvbGxlY3Rpb25SZWR1Y2VyRmFjdG9yeSxcbn0gZnJvbSAnLi9lbnRpdHktY29sbGVjdGlvbi1yZWR1Y2VyJztcblxuLyoqIEEgaGFzaCBvZiBFbnRpdHlDb2xsZWN0aW9uUmVkdWNlcnMgKi9cbmV4cG9ydCBpbnRlcmZhY2UgRW50aXR5Q29sbGVjdGlvblJlZHVjZXJzIHtcbiAgW2VudGl0eTogc3RyaW5nXTogRW50aXR5Q29sbGVjdGlvblJlZHVjZXI8YW55Pjtcbn1cblxuLyoqXG4gKiBSZWdpc3RyeSBvZiBlbnRpdHkgdHlwZXMgYW5kIHRoZWlyIHByZXZpb3VzbHktY29uc3RydWN0ZWQgcmVkdWNlcnMuXG4gKiBDYW4gY3JlYXRlIGEgbmV3IENvbGxlY3Rpb25SZWR1Y2VyLCB3aGljaCBpdCByZWdpc3RlcnMgZm9yIHN1YnNlcXVlbnQgdXNlLlxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRW50aXR5Q29sbGVjdGlvblJlZHVjZXJSZWdpc3RyeSB7XG4gIHByb3RlY3RlZCBlbnRpdHlDb2xsZWN0aW9uUmVkdWNlcnM6IEVudGl0eUNvbGxlY3Rpb25SZWR1Y2VycyA9IHt9O1xuICBwcml2YXRlIGVudGl0eUNvbGxlY3Rpb25NZXRhUmVkdWNlcjogTWV0YVJlZHVjZXI8XG4gICAgRW50aXR5Q29sbGVjdGlvbixcbiAgICBFbnRpdHlBY3Rpb25cbiAgPjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVudGl0eUNvbGxlY3Rpb25SZWR1Y2VyRmFjdG9yeTogRW50aXR5Q29sbGVjdGlvblJlZHVjZXJGYWN0b3J5LFxuICAgIEBPcHRpb25hbCgpXG4gICAgQEluamVjdChFTlRJVFlfQ09MTEVDVElPTl9NRVRBX1JFRFVDRVJTKVxuICAgIGVudGl0eUNvbGxlY3Rpb25NZXRhUmVkdWNlcnM/OiBNZXRhUmVkdWNlcjxFbnRpdHlDb2xsZWN0aW9uLCBFbnRpdHlBY3Rpb24+W11cbiAgKSB7XG4gICAgdGhpcy5lbnRpdHlDb2xsZWN0aW9uTWV0YVJlZHVjZXIgPSBjb21wb3NlLmFwcGx5KFxuICAgICAgbnVsbCxcbiAgICAgIGVudGl0eUNvbGxlY3Rpb25NZXRhUmVkdWNlcnMgfHwgW11cbiAgICApIGFzIGFueTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHJlZ2lzdGVyZWQgRW50aXR5Q29sbGVjdGlvblJlZHVjZXI8VD4gZm9yIHRoaXMgZW50aXR5IHR5cGUgb3IgY3JlYXRlIG9uZSBhbmQgcmVnaXN0ZXIgaXQuXG4gICAqIEBwYXJhbSBlbnRpdHlOYW1lIE5hbWUgb2YgdGhlIGVudGl0eSB0eXBlIGZvciB0aGlzIHJlZHVjZXJcbiAgICovXG4gIGdldE9yQ3JlYXRlUmVkdWNlcjxUPihlbnRpdHlOYW1lOiBzdHJpbmcpOiBFbnRpdHlDb2xsZWN0aW9uUmVkdWNlcjxUPiB7XG4gICAgbGV0IHJlZHVjZXI6IEVudGl0eUNvbGxlY3Rpb25SZWR1Y2VyPFQ+ID0gdGhpcy5lbnRpdHlDb2xsZWN0aW9uUmVkdWNlcnNbXG4gICAgICBlbnRpdHlOYW1lXG4gICAgXTtcblxuICAgIGlmICghcmVkdWNlcikge1xuICAgICAgcmVkdWNlciA9IHRoaXMuZW50aXR5Q29sbGVjdGlvblJlZHVjZXJGYWN0b3J5LmNyZWF0ZTxUPihlbnRpdHlOYW1lKTtcbiAgICAgIHJlZHVjZXIgPSB0aGlzLnJlZ2lzdGVyUmVkdWNlcjxUPihlbnRpdHlOYW1lLCByZWR1Y2VyKTtcbiAgICAgIHRoaXMuZW50aXR5Q29sbGVjdGlvblJlZHVjZXJzW2VudGl0eU5hbWVdID0gcmVkdWNlcjtcbiAgICB9XG4gICAgcmV0dXJuIHJlZHVjZXI7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXIgYW4gRW50aXR5Q29sbGVjdGlvblJlZHVjZXIgZm9yIGFuIGVudGl0eSB0eXBlXG4gICAqIEBwYXJhbSBlbnRpdHlOYW1lIC0gdGhlIG5hbWUgb2YgdGhlIGVudGl0eSB0eXBlXG4gICAqIEBwYXJhbSByZWR1Y2VyIC0gcmVkdWNlciBmb3IgdGhhdCBlbnRpdHkgdHlwZVxuICAgKlxuICAgKiBFeGFtcGxlczpcbiAgICogICByZWdpc3RlclJlZHVjZXIoJ0hlcm8nLCBteUhlcm9SZWR1Y2VyKTtcbiAgICogICByZWdpc3RlclJlZHVjZXIoJ1ZpbGxhaW4nLCBteVZpbGxhaW5SZWR1Y2VyKTtcbiAgICovXG4gIHJlZ2lzdGVyUmVkdWNlcjxUPihcbiAgICBlbnRpdHlOYW1lOiBzdHJpbmcsXG4gICAgcmVkdWNlcjogRW50aXR5Q29sbGVjdGlvblJlZHVjZXI8VD5cbiAgKTogRW50aXR5Q29sbGVjdGlvblJlZHVjZXI8VD4ge1xuICAgIHJlZHVjZXIgPSB0aGlzLmVudGl0eUNvbGxlY3Rpb25NZXRhUmVkdWNlcihyZWR1Y2VyIGFzIGFueSk7XG4gICAgcmV0dXJuICh0aGlzLmVudGl0eUNvbGxlY3Rpb25SZWR1Y2Vyc1tlbnRpdHlOYW1lLnRyaW0oKV0gPSByZWR1Y2VyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIGJhdGNoIG9mIEVudGl0eUNvbGxlY3Rpb25SZWR1Y2Vycy5cbiAgICogQHBhcmFtIHJlZHVjZXJzIC0gcmVkdWNlcnMgdG8gbWVyZ2UgaW50byBleGlzdGluZyByZWR1Y2Vyc1xuICAgKlxuICAgKiBFeGFtcGxlczpcbiAgICogICByZWdpc3RlclJlZHVjZXJzKHtcbiAgICogICAgIEhlcm86IG15SGVyb1JlZHVjZXIsXG4gICAqICAgICBWaWxsYWluOiBteVZpbGxhaW5SZWR1Y2VyXG4gICAqICAgfSk7XG4gICAqL1xuICByZWdpc3RlclJlZHVjZXJzKHJlZHVjZXJzOiBFbnRpdHlDb2xsZWN0aW9uUmVkdWNlcnMpIHtcbiAgICBjb25zdCBrZXlzID0gcmVkdWNlcnMgPyBPYmplY3Qua2V5cyhyZWR1Y2VycykgOiBbXTtcbiAgICBrZXlzLmZvckVhY2goKGtleSkgPT4gdGhpcy5yZWdpc3RlclJlZHVjZXIoa2V5LCByZWR1Y2Vyc1trZXldKSk7XG4gIH1cbn1cbiJdfQ==